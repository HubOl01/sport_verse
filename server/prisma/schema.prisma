// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Auth {
//   id    Int     @id @default(autoincrement())
//   email String
//   pass  String
//   VKID  String?
// }

// Модель для пользователя
model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username String? @unique @default(dbgenerated("'user_' || floor(random())::text"))

  profile    Profile?
  createdAt  DateTime   @default(now())
  statusUser StatusUser @default(USER)

  // Связь с тренировочными группами (спортсмены)
  athletesIn   TrainingGroup[] @relation("Athletes")
  // Связь с тренировочными группами (тренер)
  trainersIn   TrainingGroup[] @relation("Trainers")
  TrainingPlan TrainingPlan[]
}

// Модель для профиля пользователя
model Profile {
  id          Int       @id @default(autoincrement())
  name        String?
  dateOfBirth DateTime?
  url_avatar  String?
  about       String?
  statusId    Int?
  roleId      Int
  isVerified  Boolean   @default(false)

  userId           Int                @unique
  user             User               @relation(fields: [userId], references: [id])
  role             Role               @relation(fields: [roleId], references: [id])
  status           Status?            @relation(fields: [statusId], references: [id])
  ProfileSportType ProfileSportType[]
}

model Role {
  id      Int       @id @default(autoincrement())
  title   String
  Profile Profile[]
}

model Status {
  id        Int       @id @default(autoincrement())
  title     String
  desc      String
  svg_image String
  Profile   Profile[]
}

model SportType {
  id               Int                @id @default(autoincrement())
  title            String
  ProfileSportType ProfileSportType[]
  TrainingPlan     TrainingPlan[]
}

model ProfileSportType {
  id          Int       @id @default(autoincrement())
  profileId   Int
  sportTypeId Int
  profile     Profile   @relation(fields: [profileId], references: [id])
  sportType   SportType @relation(fields: [sportTypeId], references: [id])
}

model TrainingPlan {
  id             Int            @id @default(autoincrement())
  title          String
  statusPublish  Int
  description    String?
  date_created   DateTime
  userId         Int
  SportTypeId    Int
  date_start     DateTime
  date_end       DateTime
  statusTraining Int
  sportTypeId    Int
  sportType      SportType      @relation(fields: [sportTypeId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  PlanExercise   PlanExercise[]
}

model PlanExercise {
  id             Int           @id @default(autoincrement())
  idPlanExercise Int
  trainingPlanId Int
  setTotal       Int
  repTotal       Int
  exerciseStatus Int
  exerciseId     Int
  exercise       Exercise      @relation(fields: [exerciseId], references: [id])
  trainingPlan   TrainingPlan  @relation(fields: [trainingPlanId], references: [id])
  ExerciseSet    ExerciseSet[]
}

model Exercise {
  id                 Int            @id @default(autoincrement())
  planExerciseId     Int
  name               String
  description        String?
  ExerciseCategoryId Int
  imageString        String?
  PlanExercise       PlanExercise[]
}

model ExerciseCategory {
  id    Int    @id @default(autoincrement())
  title String
}

model ExerciseSet {
  id Int @id @default(autoincrement())

  planExerciseId Int
  date           DateTime

  duration        BigInt?
  distance        Float?
  weight          Float?
  repetitions     Int?
  calories_burned Int?
  route_gpx       String?

  stringType   String?
  planExercise PlanExercise @relation(fields: [planExerciseId], references: [id])
}

model TrainingResult {
  id             Int      @id @default(autoincrement())
  trainingPlanId Int
  date_end       DateTime
  duration       BigInt?
  difficulty     Int?     @default(0) // сложность тренировки от 0-10
}

// Модель для группы с тренером и спортсменами
model TrainingGroup {
  id        Int  @id @default(autoincrement())
  trainerId Int
  athleteId Int
  // Связь с тренером
  trainer   User @relation("Trainers", fields: [trainerId], references: [id])
  // Связь со спортсменом
  athlete   User @relation("Athletes", fields: [athleteId], references: [id])
}

enum StatusUser {
  USER
  ADMIN
}

model StatusPublish {
  id    Int    @id @default(autoincrement())
  title String
}
