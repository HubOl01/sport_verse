// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель для пользователя
model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  VKID       String?
  username   String?    @unique @default(dbgenerated("'user_' || floor(random())::text"))
  profile    Profile?
  createdAt  DateTime   @default(now())
  statusUser StatusUser @default(USER)

  TrainingPlan    TrainingPlan[]
  LikeTraining    LikeTraining[]
  CommentTraining CommentTraining[]
  ViewsTraining   ViewsTraining[]
  parentPlans     TrainingPlan[]    @relation("parentUser")

  // Связь с тренировочными группами (спортсмены)
  athleteInGroups AthleteInGroup[]

  // Связь с тренировочными группами (тренер)
  trainerInGroups TrainingGroup[] @relation("Trainers")
  // Подписки (на кого подписан пользователь)
  subscriptions   Subscription[]  @relation("Subscriber")

  // Подписчики (кто подписан на пользователя)
  subscribers    Subscription[]   @relation("SubscribedTo")
  JoinRequest    JoinRequest[]
  TrainingResult TrainingResult[]
}

// Модель для профиля пользователя
model Profile {
  id               Int                @id @default(autoincrement())
  name             String?
  dateOfBirth      DateTime?
  startSportDate   DateTime?
  endSportDate     DateTime?
  url_avatar       String?
  about            String?
  statusId         Int?
  roleId           Int
  isVerified       Boolean            @default(false)
  sportCategoryId  Int?
  sportTypeId      Int?
  userId           Int                @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  role             Role               @relation(fields: [roleId], references: [id])
  status           StatusProfile?     @relation(fields: [statusId], references: [id])
  sportCategory    SportCategory?     @relation(fields: [sportCategoryId], references: [id])
  sportType        SportType?         @relation(fields: [sportTypeId], references: [id])
  ProfileSportType ProfileSportType[]
}

model Role {
  id      Int       @id @default(autoincrement())
  title   String    @unique
  Profile Profile[]
}

model StatusProfile {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  desc      String
  svg_image String
  Profile   Profile[]
}

model SportCategory {
  id      Int       @id @default(autoincrement())
  title   String    @unique
  image   String?
  Profile Profile[]
}

model SportType {
  id               Int                @id @default(autoincrement())
  title            String             @unique
  image            String?
  ProfileSportType ProfileSportType[]
  TrainingPlan     TrainingPlan[]
  Profile          Profile[]
  TrainingGroup    TrainingGroup[]
}

model ProfileSportType {
  id          Int       @id @default(autoincrement())
  profileId   Int
  sportTypeId Int
  profile     Profile   @relation(fields: [profileId], references: [id])
  sportType   SportType @relation(fields: [sportTypeId], references: [id])
}

model TrainingPlan {
  id                  Int               @id @default(autoincrement())
  title               String
  statusPublishId     Int               @default(1)
  isPrivate           Int?              @default(1)
  description         String?
  date_created        DateTime?         @default(now())
  userId              Int
  date_start          DateTime?         @default(now())
  date_end            DateTime?         @default(now())
  parentUserId        Int?
  parentPlanId        Int?
  parentGroupId       Int?
  parentPlanInGroupId Int?
  statusTrainingId    Int
  sportTypeId         Int
  statusPublish       StatusPublish?    @relation(fields: [statusPublishId], references: [id])
  sportType           SportType         @relation(fields: [sportTypeId], references: [id])
  user                User              @relation(fields: [userId], references: [id])
  parentUser          User?             @relation("parentUser", fields: [parentUserId], references: [id], onDelete: SetNull)
  parentPlan          TrainingPlan?     @relation("parentPlan", fields: [parentPlanId], references: [id], onDelete: SetNull)
  parentGroup         TrainingGroup?    @relation("parentGroup", fields: [parentGroupId], references: [id], onDelete: SetNull)
  parentPlanInGroup   PlanInGroup?      @relation("parentPlanInGroup", fields: [parentPlanInGroupId], references: [id], onDelete: SetNull)
  PlanExercise        PlanExercise[]
  StatusTraining      StatusTraining    @relation(fields: [statusTrainingId], references: [id])
  TrainingResult      TrainingResult[]
  LikeTraining        LikeTraining[]
  CommentTraining     CommentTraining[]
  ViewsTraining       ViewsTraining[]
  PlanInGroup         PlanInGroup[]

  TrainingPlan TrainingPlan[] @relation("parentPlan")
}

model PlanExercise {
  id             Int           @id @default(autoincrement())
  trainingPlanId Int
  setTotal       Int
  repTotal       Int
  exerciseStatus Int
  exerciseId     Int
  exercise       Exercise      @relation(fields: [exerciseId], references: [id])
  trainingPlan   TrainingPlan  @relation(fields: [trainingPlanId], references: [id])
  ExerciseSet    ExerciseSet[]
}

model Exercise {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  description        String?
  ExerciseCategoryId Int
  userId             Int?
  imageString        String?
  isPrivate          Boolean           @default(true)
  exerciseCategory   ExerciseCategory? @relation(fields: [ExerciseCategoryId], references: [id])
  PlanExercise       PlanExercise[]
}

model ExerciseCategory {
  id       Int        @id @default(autoincrement())
  title    String     @unique
  Exercise Exercise[]
}

model ExerciseSet {
  id Int @id @default(autoincrement())

  planExerciseId Int
  date           DateTime? @default(now())

  duration        Int?
  distance        Float?
  weight          Float?
  repetitions     Int?
  calories_burned Int?
  route_gpx       String?

  stringType   String?
  stringUnit   String?
  planExercise PlanExercise @relation(fields: [planExerciseId], references: [id])
}

model TrainingResult {
  id             Int           @id @default(autoincrement())
  trainingPlanId Int?
  userId         Int
  groupInGroupId Int?
  date_start     DateTime      @default(now())
  date_end       DateTime?
  createdAt      DateTime      @default(now())
  comment        String?
  commentTrainer String?
  difficulty     Int?          @default(0)
  trainingPlan   TrainingPlan? @relation(fields: [trainingPlanId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  groupInGroup   PlanInGroup?  @relation(fields: [groupInGroupId], references: [id])
}

// Модель для статуса тренировочного плано (Планирование, выполнение, внесение)
model StatusTraining {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  TrainingPlan TrainingPlan[]
}

// Модель для группы с тренером и спортсменами
model TrainingGroup {
  id          Int      @id @default(autoincrement())
  title       String // Название группы
  desc        String? // Описание группы (необязательное)
  trainerId   Int // ID тренера
  sportTypeId Int?
  isPrivate   Int      @default(0)
  createdAt   DateTime @default(now())

  // Связь с тренером (один тренер на группу)
  trainer      User             @relation("Trainers", fields: [trainerId], references: [id])
  sportType    SportType?       @relation(fields: [sportTypeId], references: [id])
  // Связь со спортсменами (многие спортсмены в одной группе)
  athletes     AthleteInGroup[]
  PlanInGroup  PlanInGroup[]
  JoinRequest  JoinRequest[]
  TrainingPlan TrainingPlan[]   @relation("parentGroup")
}

model PlanInGroup {
  id             Int              @id @default(autoincrement())
  title          String?
  desc           String?
  planAt         DateTime         @default(now())
  planId         Int
  groupId        Int
  plan           TrainingPlan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  group          TrainingGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  TrainingPlan   TrainingPlan[]   @relation("parentPlanInGroup")
  TrainingResult TrainingResult[]
}

model AthleteInGroup {
  id              Int      @id @default(autoincrement())
  trainingGroupId Int
  athleteId       Int
  joinedAt        DateTime @default(now())

  // Связи
  trainingGroup TrainingGroup @relation(fields: [trainingGroupId], references: [id], onDelete: Cascade)
  athlete       User          @relation(fields: [athleteId], references: [id], onDelete: Cascade)

  @@unique([trainingGroupId, athleteId]) // Уникальность пары (группа, спортсмен)
}

model JoinRequest {
  id              Int      @id @default(autoincrement())
  trainingGroupId Int
  athleteId       Int
  status          String   @default("pending") // Статус: pending, approved, rejected
  createdAt       DateTime @default(now())

  // Связи
  trainingGroup TrainingGroup @relation(fields: [trainingGroupId], references: [id])
  athlete       User          @relation(fields: [athleteId], references: [id])

  @@unique([trainingGroupId, athleteId]) // Уникальность пары (группа, спортсмен)
}

model Subscription {
  id             Int      @id @default(autoincrement())
  subscriberId   Int // ID подписчика (кто подписывается)
  subscribedToId Int // ID пользователя, на которого подписываются
  createdAt      DateTime @default(now())

  // Связи
  subscriber   User @relation("Subscriber", fields: [subscriberId], references: [id])
  subscribedTo User @relation("SubscribedTo", fields: [subscribedToId], references: [id])

  @@unique([subscriberId, subscribedToId]) // Уникальность пары (подписчик, подписка)
}

enum StatusUser {
  USER
  ADMIN
}

model StatusPublish {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  TrainingPlan TrainingPlan[]
}

model LikeTraining {
  id             Int          @id @default(autoincrement())
  userId         Int
  trainingPlanId Int
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  @@unique([userId, trainingPlanId])
}

model CommentTraining {
  id             Int          @id @default(autoincrement())
  content        String
  userId         Int
  trainingPlanId Int
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  parentCommentId Int?
  parentComment   CommentTraining?  @relation("Replies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         CommentTraining[] @relation("Replies")
}

model ViewsTraining {
  id             Int          @id @default(autoincrement())
  userId         Int?
  trainingPlanId Int
  ip             String?
  visitorId      String?
  createdAt      DateTime     @default(now())
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  date        DateTime @default(now())
}
