// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель для пользователя
model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String
  VKID       String?
  username   String?    @unique @default(dbgenerated("'user_' || floor(random())::text"))
  profile    Profile?
  createdAt  DateTime   @default(now())
  statusUser StatusUser @default(USER)

  // Связь с тренировочными группами (спортсмены)
  athletesIn      TrainingGroup[]   @relation("Athletes")
  // Связь с тренировочными группами (тренер)
  trainersIn      TrainingGroup[]   @relation("Trainers")
  TrainingPlan    TrainingPlan[]
  LikeTraining    LikeTraining[]
  CommentTraining CommentTraining[]
  ViewsTraining   ViewsTraining[]
}

// Модель для профиля пользователя
model Profile {
  id          Int       @id @default(autoincrement())
  name        String?
  dateOfBirth DateTime?
  url_avatar  String?
  about       String?
  statusId    Int?
  roleId      Int
  isVerified  Boolean   @default(false)

  userId           Int                @unique
  user             User               @relation(fields: [userId], references: [id])
  role             Role               @relation(fields: [roleId], references: [id])
  status           StatusProfile?     @relation(fields: [statusId], references: [id])
  ProfileSportType ProfileSportType[]
}

model Role {
  id      Int       @id @default(autoincrement())
  title   String    @unique
  Profile Profile[]
}

model StatusProfile {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  desc      String
  svg_image String
  Profile   Profile[]
}

model SportType {
  id               Int                @id @default(autoincrement())
  title            String             @unique
  image            String?
  ProfileSportType ProfileSportType[]
  TrainingPlan     TrainingPlan[]
}

model ProfileSportType {
  id          Int       @id @default(autoincrement())
  profileId   Int
  sportTypeId Int
  profile     Profile   @relation(fields: [profileId], references: [id])
  sportType   SportType @relation(fields: [sportTypeId], references: [id])
}

model TrainingPlan {
  id               Int               @id @default(autoincrement())
  title            String
  statusPublishId  Int               @default(1)
  description      String?
  date_created     DateTime?         @default(now())
  userId           Int
  date_start       DateTime?         @default(now())
  date_end         DateTime?         @default(now())
  statusTrainingId Int
  sportTypeId      Int
  statusPublish    StatusPublish?    @relation(fields: [statusPublishId], references: [id])
  sportType        SportType         @relation(fields: [sportTypeId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  PlanExercise     PlanExercise[]
  StatusTraining   StatusTraining    @relation(fields: [statusTrainingId], references: [id])
  TrainingResult   TrainingResult[]
  LikeTraining     LikeTraining[]
  CommentTraining  CommentTraining[]
  ViewsTraining    ViewsTraining[]
}

model PlanExercise {
  id             Int           @id @default(autoincrement())
  trainingPlanId Int
  setTotal       Int
  repTotal       Int
  exerciseStatus Int
  exerciseId     Int
  exercise       Exercise      @relation(fields: [exerciseId], references: [id])
  trainingPlan   TrainingPlan  @relation(fields: [trainingPlanId], references: [id])
  ExerciseSet    ExerciseSet[]
}

model Exercise {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  description        String?
  ExerciseCategoryId Int
  imageString        String?
  isPrivate          Boolean           @default(true)
  exerciseCategory   ExerciseCategory? @relation(fields: [ExerciseCategoryId], references: [id])
  PlanExercise       PlanExercise[]
}

model ExerciseCategory {
  id       Int        @id @default(autoincrement())
  title    String     @unique
  Exercise Exercise[]
}

model ExerciseSet {
  id Int @id @default(autoincrement())

  planExerciseId Int
  date           DateTime? @default(now())

  duration        BigInt?
  distance        Float?
  weight          Float?
  repetitions     Int?
  calories_burned Int?
  route_gpx       String?

  stringType   String?
  stringUnit   String?
  planExercise PlanExercise @relation(fields: [planExerciseId], references: [id])
}

model TrainingResult {
  id             Int          @id @default(autoincrement())
  trainingPlanId Int
  date_end       DateTime
  duration       BigInt?
  difficulty     Int?         @default(0) // сложность тренировки от 0-10
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id])
}

// Модель для статуса тренировочного плано (Планирование, выполнение, внесение)
model StatusTraining {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  TrainingPlan TrainingPlan[]
}

// Модель для группы с тренером и спортсменами
model TrainingGroup {
  id        Int  @id @default(autoincrement())
  trainerId Int
  athleteId Int
  // Связь с тренером
  trainer   User @relation("Trainers", fields: [trainerId], references: [id])
  // Связь со спортсменом
  athlete   User @relation("Athletes", fields: [athleteId], references: [id])
}

enum StatusUser {
  USER
  ADMIN
}

model StatusPublish {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  TrainingPlan TrainingPlan[]
}

model LikeTraining {
  id             Int          @id @default(autoincrement())
  userId         Int
  trainingPlanId Int
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
}

model CommentTraining {
  id             Int          @id @default(autoincrement())
  content        String
  userId         Int
  trainingPlanId Int
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)

  parentCommentId Int?
  parentComment   CommentTraining?  @relation("Replies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         CommentTraining[] @relation("Replies")
}

model ViewsTraining {
  id             Int          @id @default(autoincrement())
  userId         Int
  trainingPlanId Int
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  date        DateTime @default(now())
}
